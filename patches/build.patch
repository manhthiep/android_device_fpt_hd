diff --git core/combo/HOST_linux-x86.mk core/combo/HOST_linux-x86.mk
index 5ae4972..a821867 100644
--- core/combo/HOST_linux-x86.mk
+++ core/combo/HOST_linux-x86.mk
@@ -53,6 +53,7 @@ HOST_GLOBAL_CFLAGS += \
 	-include $(call select-android-config-h,linux-x86)
 
 # Disable new longjmp in glibc 2.11 and later. See bug 2967937.
-HOST_GLOBAL_CFLAGS += -D_FORTIFY_SOURCE=0
+#HOST_GLOBAL_CFLAGS += -D_FORTIFY_SOURCE=0
+HOST_GLOBAL_CFLAGS += -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0
 
 HOST_NO_UNDEFINED_LDFLAGS := -Wl,--no-undefined
diff --git target/product/languages_small.mk target/product/languages_small.mk
index d695ca8..ff2a9bd 100644
--- target/product/languages_small.mk
+++ target/product/languages_small.mk
@@ -21,4 +21,4 @@
 
 # This is the list of languages that originally shipped on ADP1
 
-PRODUCT_LOCALES := en_US en_GB fr_FR it_IT de_DE es_ES
+PRODUCT_LOCALES := en_US en_GB fr_FR it_IT de_DE es_ES vi_VN
diff --git target/product/locales_full.mk target/product/locales_full.mk
index 1031303..63b9fa8 100644
--- target/product/locales_full.mk
+++ target/product/locales_full.mk
@@ -1,3 +1,3 @@
-PRODUCT_LOCALES := cs_CZ da_DK de_AT de_CH de_DE de_LI el_GR en_AU en_CA en_GB en_NZ en_SG en_US es_ES fr_CA fr_CH fr_BE fr_FR it_CH it_IT ja_JP ko_KR nb_NO nl_BE nl_NL pl_PL pt_PT ru_RU sv_SE tr_TR zh_CN zh_HK zh_TW am_ET hi_IN
+PRODUCT_LOCALES := cs_CZ da_DK de_AT de_CH de_DE de_LI el_GR en_AU en_CA en_GB en_NZ en_SG en_US es_ES fr_CA fr_CH fr_BE fr_FR it_CH it_IT ja_JP ko_KR nb_NO nl_BE nl_NL pl_PL pt_PT ru_RU sv_SE tr_TR vi_VN zh_CN zh_HK zh_TW am_ET hi_IN
 
 $(call inherit-product, build/target/product/languages_full.mk)
diff --git tools/releasetools/ota_from_target_files tools/releasetools/ota_from_target_files
index b989129..81ecba6 100755
--- tools/releasetools/ota_from_target_files
+++ tools/releasetools/ota_from_target_files
@@ -387,21 +387,25 @@ def WriteFullOTAPackage(input_zip, output_zip, fota):
       type=OPTIONS.device_type,
       fota=OPTIONS.fota)
 
-  if not OPTIONS.omit_prereq:
-    ts = GetBuildProp("ro.build.date.utc", input_zip)
-    script.AssertOlderBuild(ts)
+  #if not OPTIONS.omit_prereq:
+  #  ts = GetBuildProp("ro.build.date.utc", input_zip)
+  #  script.AssertOlderBuild(ts)
 
-  AppendAssertions(script, input_zip)
-  device_specific.FullOTA_Assertions()
+  #AppendAssertions(script, input_zip)
+  #device_specific.FullOTA_Assertions()
 
+  script.Print("Start installing...")
   script.ShowProgress(0.5, 0)
 
   if OPTIONS.wipe_user_data:
     script.FormatPartition("/data")
 
+  script.Print("Formatting system...")
   script.FormatPartition("/system")
+  script.Print("Mounting system...")
   script.Mount("/system")
-  script.UnpackPackageDir("recovery", "/system")
+  #script.UnpackPackageDir("recovery", "/system")
+  script.Print("Extracting system...")
   script.UnpackPackageDir("system", "/system")
 
   (symlinks, retouch_files) = CopySystemFiles(input_zip, output_zip)
@@ -411,22 +415,22 @@ def WriteFullOTAPackage(input_zip, output_zip, fota):
   else:
     script.UndoRetouchBinaries(retouch_files)
 
-  boot_img = common.GetBootableImage("boot.img", "boot.img",
-                                     OPTIONS.input_tmp, "BOOT")
-  recovery_img = common.GetBootableImage("recovery.img", "recovery.img",
-                                         OPTIONS.input_tmp, "RECOVERY")
-  MakeRecoveryPatch(output_zip, recovery_img, boot_img)
+  #boot_img = common.GetBootableImage("boot.img", "boot.img",
+  #                                   OPTIONS.input_tmp, "BOOT")
+  #recovery_img = common.GetBootableImage("recovery.img", "recovery.img",
+  #                                       OPTIONS.input_tmp, "RECOVERY")
+  #MakeRecoveryPatch(output_zip, recovery_img, boot_img)
 
   Item.GetMetadata(input_zip)
   Item.Get("system").SetPermissions(script)
 
-  common.CheckSize(boot_img.data, "boot.img", OPTIONS.info_dict)
-  common.ZipWriteStr(output_zip, "boot.img", boot_img.data)
-  script.ShowProgress(0.2, 0)
-
-  script.ShowProgress(0.2, 10)
-  script.WriteRawImage("/boot", "boot.img")
+  #common.CheckSize(boot_img.data, "boot.img", OPTIONS.info_dict)
+  #common.ZipWriteStr(output_zip, "boot.img", boot_img.data)
+  #script.ShowProgress(0.2, 0)
 
+  #script.ShowProgress(0.2, 10)
+  #script.WriteRawImage("/boot", "boot.img")
+  script.Print("Install completed...")
   script.ShowProgress(0.1, 0)
   device_specific.FullOTA_InstallEnd()
 
